//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JokeWcfClient.JokeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Joke", Namespace="http://schemas.datacontract.org/2004/07/JokeWcfData")]
    [System.SerializableAttribute()]
    public partial class Joke : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GradeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuestionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Answer {
            get {
                return this.AnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswerField, value) != true)) {
                    this.AnswerField = value;
                    this.RaisePropertyChanged("Answer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Grade {
            get {
                return this.GradeField;
            }
            set {
                if ((this.GradeField.Equals(value) != true)) {
                    this.GradeField = value;
                    this.RaisePropertyChanged("Grade");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Question {
            get {
                return this.QuestionField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionField, value) != true)) {
                    this.QuestionField = value;
                    this.RaisePropertyChanged("Question");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JokeService.IJokeService")]
    public interface IJokeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeService/GetJokes", ReplyAction="http://tempuri.org/IJokeService/GetJokesResponse")]
        JokeWcfClient.JokeService.Joke[] GetJokes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeService/GetJokes", ReplyAction="http://tempuri.org/IJokeService/GetJokesResponse")]
        System.Threading.Tasks.Task<JokeWcfClient.JokeService.Joke[]> GetJokesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeService/GetJokeById", ReplyAction="http://tempuri.org/IJokeService/GetJokeByIdResponse")]
        JokeWcfClient.JokeService.Joke GetJokeById(int jokeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeService/GetJokeById", ReplyAction="http://tempuri.org/IJokeService/GetJokeByIdResponse")]
        System.Threading.Tasks.Task<JokeWcfClient.JokeService.Joke> GetJokeByIdAsync(int jokeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeService/UpdateJoke", ReplyAction="http://tempuri.org/IJokeService/UpdateJokeResponse")]
        void UpdateJoke(JokeWcfClient.JokeService.Joke joke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeService/UpdateJoke", ReplyAction="http://tempuri.org/IJokeService/UpdateJokeResponse")]
        System.Threading.Tasks.Task UpdateJokeAsync(JokeWcfClient.JokeService.Joke joke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeService/AddJoke", ReplyAction="http://tempuri.org/IJokeService/AddJokeResponse")]
        void AddJoke(JokeWcfClient.JokeService.Joke joke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeService/AddJoke", ReplyAction="http://tempuri.org/IJokeService/AddJokeResponse")]
        System.Threading.Tasks.Task AddJokeAsync(JokeWcfClient.JokeService.Joke joke);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeService/DeleteJoke", ReplyAction="http://tempuri.org/IJokeService/DeleteJokeResponse")]
        void DeleteJoke(int jokeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJokeService/DeleteJoke", ReplyAction="http://tempuri.org/IJokeService/DeleteJokeResponse")]
        System.Threading.Tasks.Task DeleteJokeAsync(int jokeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJokeServiceChannel : JokeWcfClient.JokeService.IJokeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JokeServiceClient : System.ServiceModel.ClientBase<JokeWcfClient.JokeService.IJokeService>, JokeWcfClient.JokeService.IJokeService {
        
        public JokeServiceClient() {
        }
        
        public JokeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JokeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JokeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JokeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JokeWcfClient.JokeService.Joke[] GetJokes() {
            return base.Channel.GetJokes();
        }
        
        public System.Threading.Tasks.Task<JokeWcfClient.JokeService.Joke[]> GetJokesAsync() {
            return base.Channel.GetJokesAsync();
        }
        
        public JokeWcfClient.JokeService.Joke GetJokeById(int jokeId) {
            return base.Channel.GetJokeById(jokeId);
        }
        
        public System.Threading.Tasks.Task<JokeWcfClient.JokeService.Joke> GetJokeByIdAsync(int jokeId) {
            return base.Channel.GetJokeByIdAsync(jokeId);
        }
        
        public void UpdateJoke(JokeWcfClient.JokeService.Joke joke) {
            base.Channel.UpdateJoke(joke);
        }
        
        public System.Threading.Tasks.Task UpdateJokeAsync(JokeWcfClient.JokeService.Joke joke) {
            return base.Channel.UpdateJokeAsync(joke);
        }
        
        public void AddJoke(JokeWcfClient.JokeService.Joke joke) {
            base.Channel.AddJoke(joke);
        }
        
        public System.Threading.Tasks.Task AddJokeAsync(JokeWcfClient.JokeService.Joke joke) {
            return base.Channel.AddJokeAsync(joke);
        }
        
        public void DeleteJoke(int jokeId) {
            base.Channel.DeleteJoke(jokeId);
        }
        
        public System.Threading.Tasks.Task DeleteJokeAsync(int jokeId) {
            return base.Channel.DeleteJokeAsync(jokeId);
        }
    }
}
